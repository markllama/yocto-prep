- name: Prepare a Yocto build enviroment
  hosts: yocto_builders
  become: true
  vars:
#  connection: local
    vol_size_gb: 4 # GB or 4 * (1024^3) bytes
    image_dir: "/var/images"
    file_path: "sdcard.img"
    image_path: "{{ image_dir }}/{{ file_path }}"
    boot_dir: "/mnt/sdcard/boot"
    root_dir: "/mnt/sdcard/root"

    partitions:
      - number: 1
        start: "1MB"
        end: "100MB"
        part_type: "fat32"
        fs_type: "vfat"
        fs_opts: "-n BOOT"
        mount: /mnt/sdcard/boot
      - number: 2
        start: "100MB"
        end: "100%"
        part_type: "ext4"
        fs_type: "ext4"
        fs_opts: "-L ROOT"
        mount: /mnt/sdcard/root

    yocto_release: master
    src_dir: "{{ ansible_env.PWD }}/poky-{{ yocto_release }}/build/tmp/deploy/images/raspberrypi4-64"

  tasks:
    - name: Create a place for disk volumes
      file:
        path: "{{ image_dir }}"
        state: directory
        recurse: true
        
    - name: Create disk image file
      shell:
        cmd: "dd if=/dev/zero of={{ image_dir }}/{{ file_path }}  bs=1M  count=$(( {{ vol_size_gb }} * 1024))"
        creates: "{{ image_path }}"

    - name: Check if loopback is mounted
      shell:
        cmd: "losetup --list --json"
      register: loopback_check
      tags: loopback

    - name: Parse loopback output to json
      set_fact:
        loopback_json: "{{ loopback_check.stdout | from_json }}"
      tags: loopback

    #
    # check that the new file has been loopback mounted 
    #
    - name: Create loopback on the file
      shell:
        cmd: "losetup --find --show --json  {{ image_path }}"
      when: image_path not in loopback_json.loopdevices | map(attribute='back-file') | list 
      tags: loopback
      register: loopback_create


    #
    # Create and Label Partitions and filesystems on loopback file
    #
    - name: "Add Partitions to loopback disk image"
      community.general.parted:
        device: /dev/loop0
        label: msdos
        number: "{{ item.number }}"
        part_type: primary
        unit: MB
        part_start: "{{ item.start }}"
        part_end: "{{ item.end }}"
        fs_type: "{{ item.part_type }}"
        state: present
      loop: "{{ partitions }}"
      when: loopback_create.changed is true
      tags: partition
      register: parted

    - name: Create Filesystems
      community.general.filesystem:
        dev: "/dev/loop0p{{ item.number }}"
        fstype: "{{ item.fs_type }}"
        opts: "{{ item.fs_opts }}"
      loop: "{{ partitions }}"
      when: parted.changed is true
      tags: partition

    - name: Mount Filesystems
      mount:
        src: "/dev/loop0p{{ item.number }}"
        path: "{{ item.mount }}"
        fstype: "{{ item.fs_type }}"
        state: ephemeral
      loop: "{{ partitions }}"
      tags: mount

    - name: Copy Files from Build to Image
      copy:
        remote_src: true
        src: "{{ src_dir }}/{{ item }}"
        dest: "{{ boot_dir }}/"
      loop:
        - Image
        - bcm2711-rpi-4-b.dtb
        - bootfiles/
      tags: copy

    - name: Unpack the root filesystem contents
      unarchive:
        remote_src: true
        src: "{{ src_dir }}/core-image-minimal-raspberrypi4-64.rootfs.tar.bz2"
        dest: "{{ root_dir }}/"
      tags: copy

    # unmount filesystems
    - name: Unmount Filesystems
      mount:
        path: "{{ item.mount }}"
        state: unmounted
      loop: "{{ partitions }}"
      tags: cleanup

    - name: Remove Mount points
      file:
        path: /mnt/sdcard
        state: absent
      tags: cleanup

    - name: Check if loopback is mounted
      shell:
        cmd: "losetup --list --json"
      register: loopback_check2
      tags: cleanup

    - name: Parse loopback output to json
      set_fact:
        loopback_json2: "{{ loopback_check2.stdout | from_json }}"
      tags: cleanup

    # remove loopback
    - name: Clean loopbacks
      shell:
        cmd: "losetup --detach /dev/loop0"
      when: image_path in loopback_json2.loopdevices | map(attribute='back-file') | list 
      tags: cleanup
    
